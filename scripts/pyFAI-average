#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#    Project: Fast Azimuthal integration
#             https://github.com/kif/pyFAI
#
#
#    Copyright (C) European Synchrotron Radiation Facility, Grenoble, France
#
#    Authors: Jérôme Kieffer <Jerome.Kieffer@ESRF.eu>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
"""
pyFAI-average is a small utility that averages out a serie of files,
for example for dark, or flat or calibration images
"""
__author__ = "Jerome Kieffer, Picca Frédéric-Emmanuel"
__contact__ = "Jerome.Kieffer@ESRF.eu"
__license__ = "GPLv3+"
__copyright__ = "European Synchrotron Radiation Facility, Grenoble, France"
__date__ = "03/05/2013"
__status__ = "development"

import os
import sys
import fabio
import pyFAI, pyFAI.utils
from optparse import OptionParser


def main():
    usage = "usage: %prog [options] file1.edf file2.edf ..."
    version = "%prog " + pyFAI.version
    parser = OptionParser(usage=usage, version=version)
    parser.add_option("-o", "--output", dest="output",
                      type='string', default=None,
                      help="Output/ destination of average image")
    parser.add_option("-m","--method", dest="method",
                      type='string', default="mean",
                      help="Method used for averaging, can be 'mean'(default) or 'median', 'min' or 'max'")
    parser.add_option("-c", "--cutoff", dest="cutoff", type="float",default=None,
                  help="Take the mean of the average +/- cutoff * std_dev.")
    parser.add_option("-f", "--format", dest="format", type="string", default="edf",
                  help=".")
    (options, args) = parser.parse_args()
    fabiomod = fabio.__getattribute__(options.format + "image")
    fabioclass = fabiomod.__getattribute__(options.format + "image")
    images = [fabio.open(param).data for param in pyFAI.utils.expand_args(args)]
    if  options.output:
        output = options.output
    else:
        output = "%s_%s" % (os.path.commonprefix(args), options.method)
        if options.cutoff:
            output += "_cutoff_%s_std" % options.cutoff
        output += "_%s_frames.%s" % (len(args), options.format)
    if images:
        dataout = pyFAI.utils.averageDark(images, options.method, cutoff=options.cutoff)
        fimg = fabioclass(data=dataout, header={"method":options.method, "nframes":len(args), "cutoff":str(options.cutoff)})
        fimg.write(output)
if __name__ == "__main__":
    main()
